#! /usr/bin/env node

const pckg = require('../package'),
      fs = require('fs'),
      path = require('path'),
      program = require('commander'),
      Kaukau = require('..'),
      logger = require('../lib/logger');

logger.warn("'kaukau' command line is still in development !")

//var directory = ""
//var enableLogs = false, exitOnFail = false, silent = false;

var requiredModules = [];
var parametersDir = 'config/kaukau';
var options = {
  enableLogs: false,
  exitOnFail: false,
  directory: ""
};

program
  .version(pckg.version)
  .usage('[options]')
  .option('-r, --require <names>', 'require the given modules', function(value){
    return value.split(",")
  })
  .option('--directory <name>', 'the folder containing the test files', function(value){
    return path.join( "" , value)
  })
  .option('--parameters <name>', 'the folder containing the parameters files', function(value){
    return path.join( "" , value) || parametersDir
  })
  .option('--logs', 'enable logs')
  .option('--exit-on-fail', 'exit after the first set of tests if a test failed')
  .option('--silent', 'silence all console print');


program
  .command('init <path>')
  .option('--directory <name>', 'the folder containing the test files', function(value){
    return path.join( "" , value)
  })
  .option('--parameters <name>', 'the folder containing the parameters files', function(value){
    return path.join( "" , value) || parametersDir
  })
  .description('create the files and directories')
  .action(function (value) {
    var mkdir = require('mkdirp');

    value = value || "."

    var dirs = {
      "test": path.join(value, program.directory || "test"),
      "parameters": path.join(value, parametersDir)
    }

    Object.keys(dirs).forEach(
      (d) => {
          logger.info(`${d}: ${dirs[d]}`)
          mkdir.sync(dirs[d]);
      }
    )
    process.exit(0)
  });

program.on('option:require', function (value) {
  requiredModules = program.require
});

program.on('option:directory', function (value) {
  options['directory'] = value
});

program.on('option:parameters', function (value) {
  parametersDir = value
});

program.on('option:logs', function () {
  options['enableLogs'] = true
});

program.on('option:exit-on-fail', function () {
  options['exitOnFail'] = true
});

program.on('option:silent', function () {
  logger.off()
});

program.parse(process.argv)

requiredModules.forEach(
  function(mod){
    logger.info("--require", mod)
    require(mod)
  }
);

var walkSync = function(dir, filelist, subdir) {
  subdir = subdir || "";
  filelist = filelist || [];
  if(fs.existsSync(dir)){
    var files = fs.readdirSync(dir);
    files.forEach(function(file) {
      if (fs.statSync(path.join(dir, file)).isDirectory()) {
        filelist = walkSync(path.join(dir, file), filelist, path.join(subdir, file));
      }
      else {
        filelist.push(path.join(subdir, file));
      }
    });
  }
  return filelist;
};


// Importing parameters

if (fs.existsSync(parametersDir)){
  console.log(parametersDir);
  if(fs.statSync(parametersDir).isDirectory()){
    options.parameters = walkSync(parametersDir).map((f) => {
      var filepath = path.join(parametersDir, f);
      try{
        //logger.log(`Importing parameter file '${filepath}'`);
        return require(path.resolve(filepath));
      }catch(e){
        logger.error(`Could not import parameter file '${filepath}'`, e);
      }
    });
  }
  else{
    options.parameters = [parametersDir].map((f) => {
      var filepath = path.join("", f);
      try{
        //logger.log(`Importing parameter file '${filepath}'`);
        return require(path.resolve(filepath));
      }catch(e){
        logger.error(`Could not import parameter file '${filepath}'`, e);
      }
    });
  }
}

var errors = [];
var kaukau = new Kaukau(options);

/**
* Execute Kaukau instance and listen to events
*
* Mocha events:
* - test
* - test end
* - pass
* - fail
* - end
*
* Kaukau events:
* - done
*
*/
kaukau.run()
.on('done', function(){
  var status = "success";
  if(errors.length)
      status = "warn";
  logger[status]("ALL DONE,", errors.length, "errors");
})
.on('fail', function(test){
  errors.push(test);
});
