#! /usr/bin/env node

const pckg = require('../package'),
  fs = require('fs'),
  path = require('path'),
  program = require('commander'),
  logger = require('@novice1/logger'),
  debug = logger.debugger('kaukau:cmd'),
  Kaukau = require('..'),
  _actions = require('./_actions');

const DEFAULTS = {
  parametersDir: 'config/kaukau',
};

let raw = {};

let requiredModules = [];
let configFile = '';
let parametersDir = '';
let options = {
  /*enableLogs: false,
  exitOnFail: false,
  directory: ""*/
};

program
  .version(pckg.version)
  .usage('[options]')
  .option(
    '-r, --require <names>',
    'require modules',
    function (value) {
      return value.split(',');
    }
  )
  .option(
    '--directory <name>',
    'the folder containing the test files (DEPRECATED)',
    function (value) {
      raw.directory = value;
      return path.join('', value);
    }
  )
  .option(
    '-f, --file <name>',
    'file or directory of tests',
    function (value) {
      raw.directory = value;
      return path.join('', value);
    }
  )
  .option(
    '-c, --config <name>',
    'file containing the main configuration',
    function (value) {
      raw.config = value;
      return path.join('', value) || configFile;
    }
  )
  .option(
    '--parameters <name>',
    'the folder/file containing the parameters',
    function (value) {
      raw.parameters = value;
      return path.join('', value) || parametersDir;
    }
  )
  .option('--logs', 'enable logs')
  .option(
    '--exit-on-fail',
    'exit after the first set of tests if a test failed'
  )
  .option('--silent', 'silence all console print')
  .option('--debug', 'debugger');

program
  .command('init <path>')
  .option(
    '--directory <name>',
    'the folder containing the test files',
    function (value) {
      raw.directory = value;
      return path.join('', value);
    }
  )
  .option(
    '--config <name>',
    'the file containing the main configuration',
    function (value) {
      raw.config = value;
      return path.join('', value) || configFile;
    }
  )
  .option(
    '--parameters <name>',
    'the folder containing the parameters files',
    function (value) {
      raw.parameters = value;
      return path.join('', value) || parametersDir;
    }
  )
  .description('create the files and directories')
  .action(function (value) {
    value = value || '.';

    let dirs = {
      test: path.join(value, program.directory || 'tests'),
      parameters: parametersDir
        ? path.join(value, parametersDir)
        : path.join(value, DEFAULTS.parametersDir),
    };

    let files = {
      config: configFile ? path.join(value, configFile) : configFile,
    };

    let filesWrite = {
      config: function (filepath) {
        const contentJSON = _actions.getConfigContent(raw.directory || 'tests');
        _actions.writeJSON(filepath, contentJSON);
      },
    };

    _actions.init(dirs, files, filesWrite);

    process.exit(0);
  });

program.on('option:require', function (value) {
  requiredModules = program.require;
});

program.on('option:directory', function (value) {
  logger.warn('"--directory" is deprecated. Use "--file" instead.')
  options['directory'] = value;
});

program.on('option:file', function (value) {
  options['file'] = value;
});

program.on('option:config', function (value) {
  configFile = value;
});

program.on('option:parameters', function (value) {
  parametersDir = value;
});

program.on('option:logs', function () {
  options['enableLogs'] = true;
});

program.on('option:exit-on-fail', function () {
  options['exitOnFail'] = true;
});

program.on('option:silent', function () {
  // custom silent reporter ?
  options['silent'] = true;
});

program.on('option:debug', function () {
  require('debug').enable('kaukau:*')
});

program.parse(process.argv);

requiredModules.forEach(function (mod) {
  debug.silly('--require', mod);
  require(mod);
});

let walkSync = function (dir, filelist, subdir) {
  subdir = subdir || '';
  filelist = filelist || [];
  if (fs.existsSync(dir)) {
    let files = fs.readdirSync(dir);
    files.forEach(function (file) {
      if (fs.statSync(path.join(dir, file)).isDirectory()) {
        filelist = walkSync(
          path.join(dir, file),
          filelist,
          path.join(subdir, file)
        );
      } else {
        filelist.push(path.join(subdir, file));
      }
    });
  }
  return filelist;
};

// Importing config file

if (configFile) {
  try {
    let config = require(path.resolve(configFile));
    Object.keys(config).forEach((p) => {
      if (typeof options[p] === 'undefined') options[p] = config[p];
    });
  } catch (e) {
    logger.error(`Could not import configuration file '${configFile}'`, e);
  }
}

// Importing parameters

if (parametersDir && fs.existsSync(parametersDir)) {
  let param1Join = '';
  let paramsSets = [parametersDir];

  if (fs.statSync(parametersDir).isDirectory()) {
    param1Join = parametersDir;
    paramsSets = walkSync(parametersDir);
  }

  options.parameters = paramsSets.map((f) => {
    let filepath = path.join(param1Join, f);
    try {
      debug.silly(`Importing parameter file '${filepath}'`);
      return require(path.resolve(filepath));
    } catch (e) {
      logger.error(`Could not import parameter file '${filepath}'`, e);
    }
  });
}

// debug.debug('options:', options)

let kaukau = new Kaukau(options);

/**
 * Execute Kaukau instance and listen to events
 *
 * Mocha.Runner events:
 * - https://mochajs.org/api/runner
 *
 * Kaukau events:
 * - 'done'
 *
 */
kaukau
  .run();
